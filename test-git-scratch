#!/bin/bash -eu

source ./git-scratch

#!/usr/bin/bash
fail() {
    echo "$*"
    echo "${FUNCNAME[1]}: FAIL"
    exit 1
}

pass() {
    echo "${FUNCNAME[1]}: PASS"
}

expected=".gitkeep
README.md"

test-cleanup-repo()
{
    # cleanup-repo removes named repo if it can,
    # succeeds if it doesn't exist.
    install -d foo/bar
    chmod 000 foo
    ! cleanup-repo foo 2> /dev/null ||
        fail "cleanup director with perms 000 succeeds"

    chmod 777 foo
    cleanup-repo foo
    [[ ! -e foo ]] || fail "after cleanup, foo present"

    cleanup-repo foo || fail "cleanup non-existent foo fails"
    pass
}

test-remove-old-repos()
{
    # remove-old-repos removes repos in $all_repos
    # doesn't remove others.
    for repo in $all_repos sentinel; do
        git init -q $repo
    done
    remove-old-repos
    for repo in $all_repos; do
        [[ ! -d $repo ]] || fail "$repo still present"
    done
    [[ -d sentinel ]] || fail "sentinel missing"
    rm -rf sentinel
    pass
}

test-make-scratch() {
    make-scratch 
		[[ $(git -C scratch rev-parse --git-dir 2> /dev/null) == .git ]] || 
        fail "missing scratch repo"
    [[ $(git -C scratch tag -l) == initial ]] ||
        fail "initial tag missing"
    [[ ! "$(ls scratch)" ]] ||
        fail "non-hidden files in scratch"
    [[ "$(git -C scratch ls-files)" == .gitkeep ]] ||
        fail "unexpected output from `git ls-files`"
    [[ ! "$(git -C scratch status -u -s)" ]] ||
        fail "untracked files"
    rm -rf scratch
    pass
}

test-make-simple-branch() {
	make-scratch
	make-simple-branch
	[[ $( git -C scratch branch -a | wc -l) -eq 2 ]] ||
		fail "wrong number of branches"
	[[ $(git -C scratch branch --show-current) == master ]] ||
		fail "current branch not master"
	[[ $(git -C scratch ls-files) == $expected ]] ||
		fail "unexpected files $(git -C scratch ls-files)"
	git -C scratch checkout davidian 2> /dev/null ||
	    fail "cannot checkout davidian"
	[[ $(git -C scratch ls-files) == $expected ]] ||
		fail "unexpected files $(git -C scratch ls-files)"
	pass
}

test-make-remote-repo() {
    make-remote-repo
    [[ -d scratch.git ]] ||
        fail "remote repo not created"
    [[ ! -d scratch ]] ||
        fail "local copy not removed"
	[[ $(git -C scratch.git rev-parse --is-bare-repository) == true ]] ||
		fail "scratch.git not a bare repository"
    pass
}

test-make-local-clones() {
    make-local-clones
    for local_clone in itchy scratchy; do
        git -C $local_clone remote -v | grep -F -q $PWD/scratch.git ||
			fail "remote for $local_clone incorrect"
		[[ $(git -C $local_clone rev-parse --is-bare-repository) == false ]] ||
			fail "$local_clone a bare repository"
    done
    pass
}

test-parse-args() {
    # Test some of the argument parsing: -b, -f, and -c
    parse-args "-b"
    [[ $branched -eq 1 ]] ||
        fail "parse-args -b did not set '$branched' "
    parse-args "-f"
    [[ $branched -eq 1 ]] ||
        fail "parse-args -b did not set '$branched' "
    [[ $remoted -eq 1 ]] ||
        fail "parse-args -f did not set '$remoted' "
    parse-args "-c"
    [[ $clean -eq 1 ]] ||
        fail "parse-args did not set '$clean' "
    pass
}

test-cleanup-repo
test-remove-old-repos
test-make-scratch
test-make-simple-branch
test-make-remote-repo
test-make-local-clones
test-parse-args
remove-old-repos
pass
