#!/bin/bash -eu -o pipefail

die() { echo "$*"; exit 1; } >&2  # utility routine

cleanup-repo() {
    # Clean out old copy of repo.
    #
	# Remove file or directory if it exists.
    # Succeed if successful, or if it was never even there.

    repo=$1
    rm -rf $repo                   # remove it
	[ ! -e $repo ]                 # does it still exist?
}

all_repos="scratch itchy scratchy scratch.git"     # every repo potentially used by this tool
remove-old-repos() {
	# Remove any old repos.
	for repo in $all_repos; do
		cleanup-repo $repo
	done
}

make-scratch() {
    # Make a minimal scratch repo.
    #
    # Tagging the very first commit is always a good idea
    # You can find it with `git checkout $(git rev-list --all --reverse | head -1)`,
    # but `git checkout initial` is easier to remember. :-)
    git init --quiet scratch           # make a scratch directory, under Git version control
    pushd scratch > /dev/null          # go there
    touch .gitkeep                     # a hidden, empty file, to make something to add and commit.
    git add .gitkeep                   # mark it for commitment,
    git commit -q -m"Initial commit"   # and commit it!
    git tag initial                    # tag the first commit
    popd > /dev/null                   # get back, Jojo
}

make-simple-branch() {
    # Make a simple branching structure
    #
    # - one branch
    # - one commit in each branch
    # - one conflict: different text on same line in README.md
    # - ends in master branch

    pushd scratch > /dev/null                                           # go there
    branchname=davidian                                                 # q.v.
    git checkout --quiet -b $branchname                                 # make a new branch
    echo "# Scratch branch $branchname for exploring Git" > README.md   # give it a README
    git add .                                                           # add "everything new/changed"
    git commit -q -m"Add README.md for branch $branchname"              # descriptive commit message
    git checkout --quiet -                                              # checkout the previous branch
    echo "# Scratch repo for exploring Git" > README.md                 # README for master branch
    git add .                                                           # add "everything new/changed"
    git commit -q -m"Add README.md"                                     # another descriptive message
    popd > /dev/null                                                    # get back, Jojo
}

make-remote-repo() {
    # Initialize remote repo from local, then remove local
    #
    # - create a new remote from a local
    # - remove original repo
    # order is important here.
    # N.B.: this assumes the remote repo is really created on localhost

    git clone --quiet --bare scratch  # assume localhost
    rm -rf scratch
}

make-local-clones() {
    # Make a pair of local clones of remote
    #
    # Each clone will be owned by a different user,
    # so logs reflect committers.
    # N.B.: `ssh localhost` must succeed for the clone to work.
    # To set ssh up on a Mac, search for "remote login" in System Settings
    for user in itchy scratchy; do
        local_repo=$user
        git clone --quiet scratch.git $local_repo
        git -C $local_repo config user.email "$user@localhost"
    done
    git -C itchy config user.name "Itchy Mouse"
    git -C scratchy config user.name "Scratchy Cat"
}

parse-args() {
	# Process optional args
	#
	# -h: help
	# -b: make a branch
	# -f: full repo. remote and two clones, by different users
	#     implies '-b'
	# I don't yet have good tests for this
	# bash lacks good arg parsing
	usage="git scratch [-h | -b | -f | -c ]"
	while getopts ":hbfc" opt; do
		case $opt in          
			h) echo "$usage" ; exit 0 ;;
			b) branched=1; shift;;
			f) remoted=1; branched=1; shift;;
			c) clean=1; shift;;
			\?) echo "Invalid option: -$OPTARG" >&2; die "$usage" ;;
		esac
	done
	if [ $# -ne 0 ]; then
		die "usage: $usage"
	fi
}


# The whole Megillah
if [[ $BASH_SOURCE == $0 ]]; then
	tmpdir=$PWD                     # as good a place as any to work
	cd $tmpdir                      # so work there

	parse-args "$@"                 # parse command-line args and store values
	remove-old-repos                # cleanliness is next to godliness
	if [[ "${clean:-}" ]]; then     # clean out the old, and we're done
		exit 0
	fi
	make-scratch                   # the default
	if [ "${branched:-}" ]; then
		make-simple-branch         # add a branch
	fi
	if ! [ "${remoted:-}" ]; then  # we're done!
		exit 0
	fi
	# make full remote and local clones
	make-remote-repo
	make-local-clones
fi
