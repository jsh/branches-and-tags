#!/bin/bash -eu

source nscratch
source status
expected=".gitkeep
README.md"

test-cleanup-repo()
{
    # cleanup-repo removes named repo if it can,
    # succeeds if it doesn't exist.
    install -d foo/bar
    chmod 000 foo
    ! cleanup-repo foo 2> /dev/null ||
        die "cleanup director with perms 000 succeeds"

    chmod 777 foo
    cleanup-repo foo
    [[ ! -e foo ]] || die "after cleanup, foo present"

    cleanup-repo foo || die "cleanup non-existent foo fails"
    pass
}

test-remove-old-repos()
{
    # remove-old-repos removes repos in $all_repos
    # doesn't remove others.
    for repo in $all_repos sentinel; do
        git init -q $repo
    done
    remove-old-repos
    for repo in $all_repos; do
        [[ ! -d $repo ]] || die "$repo still present"
    done
    [[ -d sentinel ]] || die "sentinel missing"
    rm -rf sentinel
    pass
}

test-make-scratch() {
    make-scratch 
		[[ $(git -C scratch rev-parse --git-dir 2> /dev/null) == .git ]] || 
        die "missing scratch repo"
    [[ $(git -C scratch tag -l) == initial ]] ||
        die "initial tag missing"
    [[ ! "$(ls scratch)" ]] ||
        die "non-hidden files in scratch"
    [[ "$(git -C scratch ls-files)" == .gitkeep ]] ||
        die "unexpected output from `git ls-files`"
    [[ ! "$(git -C scratch status -u -s)" ]] ||
        die "untracked files"
    rm -rf scratch
    pass
}

test-make-simple-branch() {
	make-scratch
	make-simple-branch
	[[ $( git -C scratch branch -a | wc -l) -eq 2 ]] ||
		die "wrong number of branches"
	[[ $(git -C scratch branch --show-current) == master ]] ||
		die "current branch not master"
	[[ $(git -C scratch ls-files) == $expected ]] ||
		die "unexpected files $(git -C scratch ls-files)"
	git -C scratch checkout davidian 2> /dev/null ||
	    die "cannot checkout davidian"
	[[ $(git -C scratch ls-files) == $expected ]] ||
		die "unexpected files $(git -C scratch ls-files)"
	pass
}

rm -rf scratch
test-cleanup-repo
test-remove-old-repos
test-make-scratch
test-make-simple-branch
pass
